name: nvc build

on:
  push:
    branches: [ "master", "merge_openacc" ]
    paths-ignore:
      - '**/README.md'
  pull_request:
    branches: [ "master" ]
    paths-ignore:
      - '**/README.md'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: cuda-toolkit
    # You may pin to the exact commit or the version.
    # uses: Jimver/cuda-toolkit@acce010762576d6d7eafccf022b5e1e808f210b7
    - uses: Jimver/cuda-toolkit@v0.2.11
      id: cuda-toolkit
      with:
        # Cuda version
        cuda: 10.2 # optional, default is 12.2.0
        # Only installs specified subpackages, must be in the form of a JSON array. For example, if you only want to install nvcc and visual studio integration: ["nvcc", "visual_studio_integration"] double quotes required! Note that if you want to use this on Linux, 'network' method MUST be used.
        # sub-packages: # optional, default is []
        # Only installs specified subpackages that do not have the cuda prefix, must be in the form of a JSON array. For example, if you only want to install libcublas and libcufft: ["libcublas", "libcufft"] double quotes required! Note that this only works with 'network' method on only on Linux.
        # non-cuda-sub-packages: # optional, default is []
        # Installation method, can be either 'local' or 'network'. 'local' downloads the entire installer with all packages and runs that (you can still only install certain packages with sub-packages on Windows). 'network' downloads a smaller executable which only downloads necessary packages which you can define in subPackages
        # method: # optional, default is local
        # (Linux and 'local' method only) override arguments for the linux .run installer. For example if you don't want samples use ["--toolkit"] double quotes required!
        # linux-local-args: # optional, default is ["--toolkit", "--samples"]
        # Use GitHub cache to cache downloaded installer on GitHub servers
        # use-github-cache: # optional, default is true
    - uses: actions/checkout@v3
    - name: get boost
      run: sudo apt install libboost-program-options-dev
    - name: make 2d with nvidia profiling tools
      run: make clean; make ndims=2 nprof=1
    - name: make 3d with nvidia profiling tools
      run: make clean; make ndims=3 nprof=1
      
